#!/usr/bin/env bash

bindir=
etcdir=
ghtoken=$(test -f "${etcdir}/zenhub" && sed -n '2p' < "${etcdir}/zenhub")
zhtoken=$(test -f "${etcdir}/zenhub" && sed -n '1p' < "${etcdir}/zenhub")

## Command parsing ################################################################################
cmd="${1}" ; shift

## Argument and option utility functions ##########################################################
function placehold-project() {
  local url=$(hub browse -u 2> /dev/null)
  echo "$(echo "${url}" | cut -d '/' -f4)/$(echo "${url}" | cut -d '/' -f5)"
}

## Argument and option parsing ####################################################################
while (( "$#" )); do
  case "${1}" in
    --compact) compact='-c' ; shift ;;
    --filter=*) filter=${1/--filter=/''} ; shift ;;
    --github-token=*) ghtoken=${1/--github-token=/''} ; shift ;;
    --issue=*) issue=${1/--issue=/''} ; shift ;;
    --monochrome) monochrome='-M' ; shift ;;
    --project=*) project=${1/--project=/''} ; shift ;;
    --zenhub-token=*) zhtoken=${1/--zenhub-token=/''} ; shift ;;
    -c) compact='-c' ; shift ;;
    -f*) filter=${2} ; shift ; shift ;;
    -G*) ghtoken=${2} ; shift ; shift ;;
    -i*) issue=${2} ; shift ; shift ;;
    -m) monochrome='-M' ; shift ;;
    -p*) project=${2} ; shift ; shift ;;
    -Z*) zhtoken=${2} ; shift ; shift ;;
    --)
      case "${cmd}" in
        board|events|issue|move) test -z "${project}" && project=$(placehold-project) ;;
      esac
      shift
    ;;
    *)
      case "${cmd}" in
        move)
          test -n "${1}" && test -n "${pipeline}" && test -z "${position}" && position=${1}
          test -n "${1}" && test -n "${issue}" && test -z "${pipeline}" && pipeline=${1} ;;
      esac
      case "${cmd}" in
        events|issue|move) test -n "${1}" && test -n "${project}" && test -z "${issue}" && issue=${1} ;;
      esac
      case "${cmd}" in
        board|events|issue|move) test -n "${1}" && test -z "${project}" && project=${1} ;;
      esac
     shift
    ;;
  esac
done

## Implicit/default arguments and options #########################################################
case "${cmd}" in
  board)
    test -z "${project}" && test -n "$(hub browse -u 2> /dev/null)" && project=$(placehold-project)
  ;;
esac

## Argument and option prompting ##################################################################
case "${cmd}" in
  init)
    test -z "${zhtoken}" && read -e -p 'Enter ZenHub API token: ' -s zhtoken ; echo
    test -z "${ghtoken}" && read -e -p 'Enter GitHub personal access token (used solely for project slug lookups): ' -s ghtoken ; echo
  ;;
esac
case "${cmd}" in
  board|events|issue|move)
    test -z "${project}" && read -e -p 'Enter project slug (e.g. rockymadden/zenhub-cli): ' project
  ;;
esac
case "${cmd}" in
  events|issue|move)
    test -z "${issue}" && read -e -p 'Enter issue (e.g. 123): ' issue
  ;;
esac
case "${cmd}" in
  move)
    test -z "${pipeline}" && read -e -p 'Enter pipeline (e.g New Issues): ' pipeline
    test -z "${position}" && read -e -p 'Enter position (e.g top, bottom, 1, 2): ' position
  ;;
esac


## Command utility functions ######################################################################
function jqify() {
  case "${1}" in
    GET)
      local rsp
      rsp=$(\
        curl -f -s \
          -H 'Accept: application/json' \
          -H "X-Authentication-Token: ${zhtoken}" \
          "${2}")
    ;;
  esac

  case "$?" in
    0) echo ${rsp} | jq -r ${compact} ${monochrome} "${filter:=.}" ;;
    *) return 1 ;;
  esac
}

function lookup-pipeline-id() {
  local pid=${1}
  local pipeline=${2}
  local filter=".pipelines | .[] | select(.name==\"${pipeline}\") | .id"
  local compact=
  local monochrome=
  jqify GET "https://api.zenhub.io/p1/repositories/${pid}/board"
}


function lookup-project-id() {
  curl -f -s -H "Authorization: token ${ghtoken}" "https://api.github.com/repos/${1}" | \
  jq -r -c -M '.id'
}

## Command functions ##############################################################################
function board() {
  local pid=$(lookup-project-id ${project})
  jqify GET "https://api.zenhub.io/p1/repositories/${pid}/board"
}

function events() {
  local pid=$(lookup-project-id ${project})
  jqify GET "https://api.zenhub.io/p1/repositories/${pid}/issues/${issue}/events"
}

function help() {
  local a=(${0//\// })
  local bin=${a[${#a[@]}-1]}

  echo 'Usage:'
  echo "  ${bin} board <project> [--compact|-c] [--filter|-f <filter>] [--monochrome|-m]"
  echo "  ${bin} events <project> <issue> [--compact|-c] [--filter|-f <filter>] [--monochrome|-m]"
  echo "  ${bin} init [--compact|-c] [--filter|-f <filter>] [--github-token|-G <token>] [--monochrome|-m]"
  echo '    [--zenhub-token|-Z <token>]'
  echo "  ${bin} issue <project> <issue> [--compact|-c] [--filter|-f <filter>] [--monochrome|-m]"
  echo "  ${bin} move <project> <issue> <pipeline> <position>"
  echo
  echo 'Configuration Commands:'
  echo '  init    Initialize'
  echo
  echo 'Core Commands:'
  echo '  board     Project board pipelines plus the issues contained within each pipeline'
  echo '  events    Project issue events, sorted by most recent'
  echo '  issue     Project issue time estimate, pipeline, and +1s'
  echo '  move      Project issue state transitions'
}

function init() {
  echo "${zhtoken}" > "${etcdir}/zenhub" && \
  echo "${ghtoken}" >> "${etcdir}/zenhub"

  case "$?" in
    0) echo '{"outcome": "success"}' | jq -r ${compact} ${monochrome} "${filter:=.}" ;;
    *) echo '{"outcome": "failed"}' | jq -r ${compact} ${monochrome} "${filter:=.}" ; return 1 ;;
  esac
}

function issue() {
  local pid=$(lookup-project-id ${project})
  jqify GET "https://api.zenhub.io/p1/repositories/${pid}/issues/${issue}"
}

function move() {
  local project_id=$(lookup-project-id ${project})
  local pipeline_id=$(lookup-pipeline-id ${project_id} "${pipeline}")
  local payload=$(jq -nc --arg pipeline_id "$pipeline_id" --arg position ${position} '
{
  pipeline_id: $pipeline_id,
  position: $position,
}')

  curl -f -s \
       -X POST  "https://api.zenhub.io/p1/repositories/${project_id}/issues/${issue}/moves" \
       -H "Content-Type: application/json" \
       -H "X-Authentication-Token: ${zhtoken}" \
       -d "${payload}" 
} 

function version() {
  echo 'v0.1.0'
}

## Command routing ################################################################################
case "${cmd}" in
  --help|-h) help ; exit 0 ;;
  --version|-v) version ; exit 0 ;;
  board|events|init|issue|move) "${cmd}" ; exit "$?" ;;
  *) help ; exit 1 ;;
esac
